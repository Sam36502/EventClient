package ch.pearcenet.eventclient;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

/**
 * File Handler Class
 * @Author Samuel Pearce
 *
 * Saves and Loads Key-Value stores from and to files.
 */
public class FileHandler {

    // Properties File Standards
    private static final String PROP_COMMENT = "#";
    private static final String PROP_DIVIDER = "=";
    private static final String PROP_LINESEP = System.lineSeparator();

    // Autogenerated File Header
    private static final String AUTOGEN_HEADER = ": Created " + LocalDate.now().format(DateTimeFormatter.ISO_DATE);

    /**
     * Loads a properties file with Key-Value pairs.
     *
     * @param filename The path of the file to load
     * @return HashMap containing all the key-value pairs
     */
    public static HashMap<String, String> getData (String filename) {

        // Load File
        String fileContent = "";
        try {
            FileInputStream fis = new FileInputStream(filename);
            Scanner input = new Scanner(fis);

            // Read each line
            while (input.hasNextLine()) {
                fileContent += input.nextLine() + System.lineSeparator();
            }

            input.close();
            fis.close();
        } catch (IOException e) {
            Main.log("ERROR", "Failed to load data from '" + filename + "'.");
            return null;
        }

        // Parse the File
        HashMap<String, String> props = new HashMap<>();
        for (String line: fileContent.split(PROP_LINESEP)) {
            // Remove comments
            int commentIndex = line.indexOf(PROP_COMMENT);
            if (commentIndex == 0) continue;
            if (commentIndex != -1)
                line = line.substring(0, commentIndex - 1);

            // Split string by divider
            int divIndex = line.indexOf(PROP_DIVIDER);
            if (divIndex != -1) {
                String key = line.substring(0, divIndex - 1).trim();
                String value = line.substring(divIndex + 1).trim();
                props.put(key, value);
            }
        }

        return props;
    }

    /**
     * Takes a Key-Value store and saves it to
     * a properties file. Contains a commented
     * header.
     *
     * @param props HashMap of Key-Value pairs
     * @param filename Path to file to save properties to
     */
    public static void saveData(HashMap<String, String> props, String filename) {

        // Generate File Contents
        String lineSep = PROP_LINESEP;
        if (!System.lineSeparator().equals(lineSep)) lineSep += System.lineSeparator();

        String content = PROP_COMMENT + " '" + filename + "'" + AUTOGEN_HEADER + lineSep;
        for (Map.Entry<String, String> pair: props.entrySet()) {
            content += pair.getKey() + " " + PROP_DIVIDER + " " + pair.getValue() + lineSep;
        }

        // Save contents to a file
        try {
            FileOutputStream fos = new FileOutputStream(filename);
            fos.write(content.getBytes(), 0, content.length());
            fos.close();
        } catch (IOException e) {
            Main.log("ERROR", "Failed to save data to '" + filename + "'.");
            return;
        }

    }

}
